'use strict';
// core
const fs = require('fs')
// local
const cygpath = require('../cygpath.js');
const debug = require('../debug.js');

module.exports = function (ref) {
    const spawn = ref.spawn;
    ref.spawn = function (file, args, options) {
        if (/\bcmd(?:[.]exe)?\b/.test(file)) {
            args = [args.join(' ')];
            debug('original command:', file, args[0]);
            args[0] = args[0].replace(/^(.*[/][c|k]\s+)(.*)$/i, function ($0, switches, commandline) {
                // exists `/S`
                if (/^(?:^|\s)[/]s\s/i.test(switches)) {
                    commandline = commandline.replace(/^"|"$/g, '');
                }

                // whether to handling
                const cmd = /^("*)(.*?[.](bat|com|exe))\1(?= |$)/i.exec(commandline);
                if (cmd) {
                    if (cmd[3] !== 'bat') {
                        return $0;
                    }
                    // find its shell version in the case of `.bat`
                    try {
                        fs.statSync(cmd[2].replace(/[.]bat$/, ''));
                    } catch (e) {
                        return $0;
                    }
                    // remove `.bat`
                    commandline = commandline.slice(0, cmd[0].length - cmd[1].length - '.bat'.length) +
                        commandline.slice(cmd[0].length - cmd[1].length);
                }

                file = 'sh';
                const matches = commandline.match(/(?:".*?"|\S+)/g);
                if (matches) {
                    commandline = matches
                        .map((arg) => {
                            const unquoted = arg.replace(/^"|"$/g, '');
                            const quote = arg !== unquoted ? '"' : '';
                            return `${quote}${cygpath(unquoted, null, true)}${quote}`;
                        })
                        .join(' ');
                }
                return `-c '${commandline}'`;
            });
            debug('shell command:', file, args[0]);
        }
        return spawn.call(this, file, args, options);
    };
};
