'use strict';
// core
const fs = require('fs')
const path = require('path')
// local
const cygpath = require('../cygpath.js');
const debug = require('../debug.js');

module.exports = function (ref) {
    const spawn = ref.spawn;
    ref.spawn = function (file, args, options) {
        if (/\bcmd(?:[.]exe)?\b/i.test(file)) {
            args = [args.join(' ')];
            debug('original command:', file, args[0]);
            args[0] = args[0].replace(/^(.*[/][c|k]\s+)(.*)$/i, function ($0, switches, commandline) {
                // exists `/S`
                if (/(?:^|\s)[/]s\s/i.test(switches)) {
                    commandline = commandline.replace(/^"|"$/g, '');
                }

                const command = /^("*)(.*?)\1(?= |$)/.exec(commandline);
                if (!command) {
                    console.error('Could not find command:', commandline);
                    return $0;
                }

                const parsed = path.parse(command[2]);
                if (/^(?:[bd]?a|tc|fi|mk|po|z)?sh(?:exe)?$/i.test(parsed.base)) {
                    file = parsed.base;
                    switches = '';
                    commandline = commandline.slice(command[0].length);
                } else if (parsed.ext === '.com' || parsed.ext === '.exe') {
                    return $0;
                } else if (parsed.ext === '.bat') {
                    // find its shell version in the case of `.bat`
                    try {
                        fs.statSync(path.join(parsed.dir, parsed.name));
                    } catch (e) {
                        return $0;
                    }
                    file = 'sh';
                    switches = '-c '
                    // rewrite to shell version command
                    const lastIndex = command[0].length - command[1].length;
                    commandline = commandline.slice(0, lastIndex - parsed.ext.length) + commandline.slice(lastIndex);
                } else {
                    file = 'sh';
                    switches = '-c ';
                }

                const matches = commandline.match(/(?:".*?"|\S+)/g);
                if (matches) {
                    commandline = matches
                        .map((arg) => {
                            const unquoted = arg.replace(/^"|"$/g, '');
                            const quote = arg !== unquoted ? '"' : '';
                            return `${quote}${cygpath(unquoted, null, true)}${quote}`;
                        })
                        .join(' ');
                }
                return `${switches}'${commandline}'`;
            });
            debug('shell command:', file, args[0]);
        }
        return spawn.call(this, file, args, options);
    };
};
