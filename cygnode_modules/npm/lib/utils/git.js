'use strict';
// core
const path = require('path');

var winpathRE = /(?:[\\][\\][?][\\])?\b([A-Za-z]):([\\].*)/;

function toCygpath(from, arg) {
    if (!arg) {
        return arg;
    }
    return arg.replace(winpathRE, function (unused, drive, rest) {
        var cygpath = '/cygdrive/' + drive.toLowerCase() + rest.split(path.sep).join(path.posix.sep);
        if (from) {
            cygpath = path.posix.relative(toCygpath(null, from), cygpath);
        }
        return cygpath;
    });
}

module.exports = function (ref) {
    const whichAndExec = ref.exports.whichAndExec;
    ref.exports.whichAndExec = function (args, options, cb) {
        const from = args[0] !== 'clone' ? process.cwd() : null;
        return whichAndExec.call(this, args.map(toCygpath.bind(null, from)), options, cb);
    };

    const chainableExec = ref.exports.chainableExec;
    ref.exports.chainableExec = function () {
        const args = Array.prototype.slice.call(arguments);
        const from = args[0][0] !== 'clone' ? process.cwd() : null;
        args[0] = args[0].map(toCygpath.bind(null, from));
        return chainableExec.apply(this, args);
    };
};
